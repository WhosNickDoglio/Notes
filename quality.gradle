jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/reports")
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//    def fileFilter = ['**/R.class',
//                      '**/R$*.class',
//                      '**/BuildConfig.*',
//                      '**/Manifest*.*',
//                      '**/*$ViewInjector*.*',
//                      '**/*Test*.*',
//                      '**/*Dagger*.*',
//                      '**/*MembersInjector*.*',
//                      '**/*_Provide*Factory*.*',
//                      '**/*_Factory*.*',
//                      'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/test/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree], [kotlinDebugTree])
//    executionData = fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec"
//    ])
//}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}