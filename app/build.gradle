apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'jacoco'
apply from: rootProject.file("quality.gradle")

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdk
    defaultConfig {
        applicationId "com.nicholasdoglio.notes"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode 5
        versionName "1.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        signingConfigs {
            config {
                storeFile file(rootProject.file(keystoreProperties['storeFile']))
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            ext.enableCrashlytics = false
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    //Android
    implementation "com.android.support:appcompat-v7:$rootProject.support"
    implementation "com.android.support:recyclerview-v7:$rootProject.support"
    implementation "com.android.support:cardview-v7:$rootProject.support"
    implementation "com.android.support:design:$rootProject.support"
    implementation "com.android.support:support-v4:$rootProject.support"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraint"

    //ktx
    implementation "androidx.core:core-ktx:$rootProject.ktx"

    //Android Architecture Components
    implementation "android.arch.lifecycle:common-java8:$rootProject.archComponents"
    implementation "android.arch.lifecycle:extensions:$rootProject.archComponents"
    implementation "android.arch.paging:runtime:$rootProject.paging"
    implementation "android.arch.paging:rxjava2:$rootProject.rxpaging"
    implementation "android.arch.persistence.room:runtime:$rootProject.room"
    implementation "android.arch.persistence.room:rxjava2:$rootProject.room"
    kapt "android.arch.persistence.room:compiler:$rootProject.room"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroid"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rootProject.rxBinding"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.rxRelay"

    //AutoDispose
    implementation "com.uber.autodispose:autodispose-kotlin:$rootProject.dispose"
    implementation "com.uber.autodispose:autodispose-android-kotlin:$rootProject.dispose"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-kotlin:$rootProject.dispose"

    //Dagger
    implementation "com.google.dagger:dagger:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    //Debugging
    implementation "com.google.firebase:firebase-crash:$rootProject.firebase"
    implementation "com.jakewharton.timber:timber:$rootProject.timber"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.canary"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.canary"

    //Testing
    testImplementation "junit:junit:$rootProject.junit"
    testImplementation "android.arch.persistence.room:testing:$rootProject.room"
    testImplementation "android.arch.core:core-testing:$rootProject.archComponents"
    testImplementation "org.robolectric:robolectric:$rootProject.robo"
    androidTestImplementation "com.android.support.test:rules:$rootProject.espressoTest"
    androidTestImplementation "com.android.support.test:runner:$rootProject.espressoTest"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espresso"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$rootProject.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
